// Write sys call
alias processTable R9;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

// Set mode flag to system call no
[processTable + 9] = INT_WRITE;

// Save user stack in process table
[processTable + 13] = SP;

// Set kernal stack to user area of process table
SP = PAGE_SIZE * [processTable + 11] - 1;

alias userSP R0;
userSP = [processTable + 13];

alias retAdr R1;
retAdr = [PTBR + 2 * (userSP - 1) / PAGE_SIZE] * PAGE_SIZE + (userSP - 1) % PAGE_SIZE;

alias arg1 R2;
arg1 =  [[PTBR + 2 * (userSP - 4) / PAGE_SIZE] * PAGE_SIZE + (userSP - 4) % PAGE_SIZE];

if ( arg1 != -2 ) then
	alias fd R2;
    alias resTable R3;
    resTable = [processTable + 11] * PAGE_SIZE + RESOURCE_TABLE_OFFSET;

    if (fd < 0 || fd > 7 || [resTable + 2 * fd] != FILE) then
        [retAdr] = -1;
        goto exit;
    endif;

	alias openTableEntry R4;
	openTableEntry = OPEN_FILE_TABLE + 4 * [resTable + 2 * fd + 1];

	alias inodeEntry R5;
	inodeEntry = INODE_TABLE + 16 * [openTableEntry];

	if ([inodeEntry + 4] == EXCLUSIVE && [processTable + 3] != [inodeEntry + 3] && [processTable + 3] != ROOT) then
		[retAdr] = -3;
		goto exit;		
	endif;

	multipush(R9, R0, R1, R2, R3, R4, R5);
	R3 = [openTableEntry];
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R1 = ACQUIRE_INODE;
	call RESOURCE_MANAGER;
	R6 = R0;
	multipop(R9, R0, R1, R2, R3, R4, R5);
    
	if (R6 == -1) then
		[retAdr] = -1;
		goto exit;
	endif;

	alias lseek R6;
	lseek = [openTableEntry + 2];

	if (lseek == MAX_FILE_SIZE) then
		[retAdr] = -2;
		goto release_and_return;
	endif;

	alias word R7;
	word = [[PTBR + 2 * (userSP - 3) / PAGE_SIZE] * PAGE_SIZE + (userSP - 3) % PAGE_SIZE];

	alias blockNo R8;
	// If lseek same as the file size and multiple of block size
	if (lseek % XFS_BSIZE == 0 && lseek == [inodeEntry + 2]) then
		multipush(R9, R0, R1, R2, R3, R4, R5, R6, R7);
		R1 = GET_FREE_BLOCK;
		call MEMORY_MANAGER;
		blockNo = R0;
		multipop(R9, R0, R1, R2, R3, R4, R5, R6, R7);		
		
		if (blockNo == -1) then
			[retAdr] = -2;
			goto release_and_return;
		endif;

		[inodeEntry + 8 + lseek / XFS_BSIZE] = blockNo;
	else
		blockNo = [inodeEntry + 8 + lseek / XFS_BSIZE];
	endif;

	multipush(R9, R0, R1, R2, R3, R4, R5, R6, R7, R8);
	R4 = word;
	R3 = lseek % XFS_BSIZE;
	R2 = blockNo;
	R1 = BUFFERED_WRITE;
	call FILE_MANAGER;
	multipop(R9, R0, R1, R2, R3, R4, R5, R6, R7, R8);

	// if lseek == filesize, inc filesize
	if (lseek == [inodeEntry + 2]) then
		[inodeEntry + 2] = lseek + 1;
		[ROOT_FILE + 8 * [openTableEntry] + 1] = lseek + 1; 
	endif;

	[openTableEntry + 2] = [openTableEntry + 2] + 1;

	[retAdr] = 0;

	release_and_return:
	multipush(R9);
	R3 = [openTableEntry];
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R1 = RELEASE_INODE;
	call RESOURCE_MANAGER;
	multipop(R9);

else
	alias word R3;
	word = [[PTBR + 2 * (userSP - 3) / PAGE_SIZE] * PAGE_SIZE + (userSP - 3) % PAGE_SIZE];
	multipush(R0, R1, R2, R3, R9);
	R1 = TERMINAL_WRITE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;
	call DEVICE_MANAGER;
	multipop(R0, R1, R2, R3, R9);
	[retAdr] = 0;
endif;

exit:
SP = [processTable + 13];
[processTable + 9] = 0;
ireturn;
