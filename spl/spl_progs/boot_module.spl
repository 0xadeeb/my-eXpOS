// Mod 7
//library
loadi(63, 13);
loadi(64, 14);

//timer Interrupt
loadi(4, 17);
loadi(5, 18);

//disk interrupt handler
loadi(6, 19);
loadi(7, 20);

//console interrupt handler
loadi(8, 21);
loadi(9, 22);

//Init program
loadi(65, 7);
// loadi(66, 8);

//shell program
loadi(67, 9);
loadi(68, 10);

//exception handler routine
loadi(2, 15);
loadi(3, 16);

//int 4
loadi(10, 23);
loadi(11, 24);

//int 5
loadi(12, 25);
loadi(13, 26);

//int 6
loadi(14, 27);
loadi(15, 28);

//int 7
loadi(16, 29);
loadi(17, 30);

//int 8
loadi(18, 31);
loadi(19, 32);

//int 9
loadi(20, 33);
loadi(21, 34);

//int 10
loadi(22, 35);
loadi(23, 36);

//int 11
loadi(24, 37);
loadi(25, 38);

//int 12
loadi(26, 39);
loadi(27, 40);

//int 13
loadi(28, 41);
loadi(29, 42);

//int 14
loadi(30, 43);
loadi(31, 44);

//int 15
loadi(32, 45);
loadi(33, 46);

//int 16
loadi(34, 47);
loadi(35, 48);

//int 17
loadi(36, 49);
loadi(37, 50);

//resource managment module (module 0)
loadi(40, 53);
loadi(41, 54);

//process manager module (module 1)
loadi(42, 55);
loadi(43, 56);

//memory manager module (module 2)
loadi(44, 57);
loadi(45, 58);

//file manager module (module 3)
loadi(46, 59);
loadi(47, 60);

//device manager module (module 4)
loadi(48, 61);
loadi(49, 62);

//context switch module (module 5)
loadi(50 ,63);
loadi(51 ,64);

//inode table and user table
loadi(59, 3);
loadi(60, 4);

//disk free list
loadi(61, 2);

//root file
loadi(62, 5);

// Current user to kernel
[SYSTEM_STATUS_TABLE] = KERNEL;

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

// Init process
alias processTable R0;
alias pageTable R1;
processTable = PROCESS_TABLE + 16 * INIT_PROCESS;
pageTable = PAGE_TABLE_BASE + 20 * INIT_PROCESS;
[processTable] = 0;
[processTable + 1] = INIT_PROCESS;
[processTable + 3] = KERNEL;
[processTable + 4] = CREATED;
[processTable + 11] = 77;
[processTable + 12] = 0;
[processTable + 13] = 8 * PAGE_SIZE;
[processTable + 14] = pageTable;
[processTable + 15] = MAX_PROC_PAGES;

//Library
[pageTable] = 63;
[pageTable + 1] = "0100";
[pageTable + 2] = 64;
[pageTable + 3] = "0100";

//Heap
[pageTable + 4] = -1;
[pageTable + 5] = "0000";
[pageTable + 6] = -1;
[pageTable + 7] = "0000";

//Code
[pageTable + 8] = 65;
[pageTable + 9] = "0100";
[pageTable + 10] = -1;
[pageTable + 11] = "0000";
[pageTable + 12] = -1;
[pageTable + 13] = "0000";
[pageTable + 14] = -1;
[pageTable + 15] = "0000";

//Stack
[pageTable + 16] = 66;
[pageTable + 17] = "0110";
[pageTable + 18] = -1;
[pageTable + 19] = "0000";

// Set IP in top of the stack
[66 * PAGE_SIZE] = [65 * PAGE_SIZE + 1];

// Shell
processTable = PROCESS_TABLE + 16 * SHELL_PROCESS;
pageTable = PAGE_TABLE_BASE + 20 * SHELL_PROCESS;
[processTable] = 0;
[processTable + 1] = SHELL_PROCESS;
[processTable + 3] = ROOT;
[processTable + 4] = TERMINATED;
[processTable + 11] = 80;
[processTable + 12] = 0;
[processTable + 13] = 8 * PAGE_SIZE;
[processTable + 14] = pageTable;
[processTable + 15] = MAX_PROC_PAGES;

//Library
[pageTable] = 63;
[pageTable + 1] = "0100";
[pageTable + 2] = 64;
[pageTable + 3] = "0100";

//Heap
[pageTable + 4] = -1;
[pageTable + 5] = "0000";
[pageTable + 6] = -1;
[pageTable + 7] = "0000";

//Code
[pageTable + 8] = 67;
[pageTable + 9] = "0100";
[pageTable + 10] = 68;
[pageTable + 11] = "0110";
[pageTable + 12] = -1;
[pageTable + 13] = "0000";
[pageTable + 14] = -1;
[pageTable + 15] = "0000";

//Stack
[pageTable + 16] = 78;
[pageTable + 17] = "0110";
[pageTable + 18] = 79;
[pageTable + 19] = "0110";

// Set IP in top of the stack
[78 * PAGE_SIZE] = [67 * PAGE_SIZE + 1];

// Initialize per process resource table and disk map table of init and shell
alias pprm R0;
alias proc R1;
alias idx R2;
proc = INIT_PROCESS;
while (proc <= SHELL_PROCESS) do
    pprm = [PROCESS_TABLE + PT_ENTRY_SIZE * proc + 11] * PAGE_SIZE + RESOURCE_TABLE_OFFSET;
    idx = 0;
    while (idx < 16) do
        [pprm + idx] = -1;
        inline "ADD R2, 2";
    endwhile;
    idx = 0;
    while (idx < MAX_PROC_PAGES) do
        [DISK_MAP_TABLE + MAX_PROC_PAGES * proc + idx] = -1;
        inline "ADD R2, 1";
    endwhile;
    inline "ADD R1, 1";
endwhile;

//Disk map list of init and shell
[DISK_MAP_TABLE + 14] = 7;
[DISK_MAP_TABLE + 24] = 9;
[DISK_MAP_TABLE + 25] = 10;

alias i R0;
i = 3;
while (i < MAX_PROC_NUM) do
    [PROCESS_TABLE + i * 16] = -1;
    [PROCESS_TABLE + i * 16 + 4] = TERMINATED;
    inline "ADD R0, 1";
endwhile;

// initialize MEMORY_FREE_LIST
i = 0;
// For init, idle and shell programs
while (i <= 80) do
    [MEMORY_FREE_LIST + i] = 1;
    inline "ADD R0, 1";
endwhile;

// For all the others
while (i < NUM_MEM_PAGES) do
    [MEMORY_FREE_LIST + i] = 0;
    inline "ADD R0, 1";
endwhile;
[SYSTEM_STATUS_TABLE + 2] = NUM_MEM_PAGES - 81;
[SYSTEM_STATUS_TABLE + 3] = 0;

// Initialize semaphore table
i = 0;
while (i < MAX_SEM_COUNT) do
    [SEMAPHORE_TABLE + 4 * i] = -1;
    [SEMAPHORE_TABLE + 4 * i + 1] = 0;
    inline "ADD R0, 1";
endwhile;

// Initialize file status table
i = 0;
while (i < MAX_FILE_NUM) do
    [FILE_STATUS_TABLE + 4 * i] = -1;
    [FILE_STATUS_TABLE + 4 * i + 1] = -1;
    inline "ADD R0, 1";
endwhile;

// Initialize buffer table
i = 0;
while (i < MAX_BUFFER) do
    [BUFFER_TABLE + 4 * i] = -1;
    [BUFFER_TABLE + 4 * i + 1] = 0;
    [BUFFER_TABLE + 4 * i + 2] = -1;
    inline "ADD R0, 1";
endwhile;

// Initialize open file table
i = 0;
while (i < MAX_OPENFILE_NUM) do
    [OPEN_FILE_TABLE + 4 * i] = -1;
    [OPEN_FILE_TABLE + 4 * i + 1] = 0;
    inline "ADD R0, 1";
endwhile;

return;