// Mod 3
alias functionNum R1;

if (functionNum == OPEN) then
    alias fileName R2;

    alias idx R3;
    idx = 0;

    while (idx < MAX_FILE_NUM) do
        if ([INODE_TABLE + 16 * idx + 1] == fileName) then
            break;
        endif;
        idx = idx + 1;
    endwhile;

    if (idx == MAX_FILE_NUM) then
        R0 = -1;
        return;
    endif;

    multipush(R1, R2, R3);
    R1 = ACQUIRE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = idx;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3);

    // If file is deleted
    if (R0 == -1) then
        return;
    endif;

	//only data and root file can be read not exec
	if([INODE_TABLE + 16 * idx] == EXEC) then
		R0 = -1;
		goto Return;
	endif;

    alias openTableIdx R4;
    openTableIdx = 0;

    while (openTableIdx < MAX_OPENFILE_NUM) do
        if ([OPEN_FILE_TABLE + 4 * openTableIdx] == -1) then
            break;
        endif;
        openTableIdx = openTableIdx + 1;
    endwhile;

    if (openTableIdx == MAX_OPENFILE_NUM) then
        R0 = -2;
        goto Return;
    endif;

    if (fileName == "root") then
        [OPEN_FILE_TABLE + 4 * openTableIdx] = INODE_ROOT;
    else 
        if ([FILE_STATUS_TABLE + 4 * idx + 1] == -1) then
            [FILE_STATUS_TABLE + 4 * idx + 1] = 1;
        else
            [FILE_STATUS_TABLE + 4 * idx + 1] = [FILE_STATUS_TABLE + 4 * idx + 1] + 1;
        endif;
        [OPEN_FILE_TABLE + 4 * openTableIdx] = idx;
    endif;

    [OPEN_FILE_TABLE + 4 * openTableIdx + 1] = 1; 
    [OPEN_FILE_TABLE + 4 * openTableIdx + 2] = 0; 

    R0 = openTableIdx;

    Return:
    multipush(R0);
    R3 = idx;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R1 = RELEASE_INODE;
    call RESOURCE_MANAGER;
    multipop(R0);

endif;

if (functionNum == CLOSE) then
    alias openTableIdx R2;
    alias inodeIdx R3;

    inodeIdx = [OPEN_FILE_TABLE + 4 * openTableIdx];

    alias openTableEntry R4;
    openTableEntry = OPEN_FILE_TABLE + 4 * openTableIdx;
    [openTableEntry + 1] = [openTableEntry + 1] - 1;

    if ([openTableEntry + 1] == 0) then
        alias i R5;
        i = 0;
        while (i < 4) do
            [openTableEntry + i] = -1;
            i = i + 1;
        endwhile;

        alias fileTableEntry R4;
        fileTableEntry = FILE_STATUS_TABLE + 4 * inodeIdx;

        if (inodeIdx != INODE_ROOT) then
            [fileTableEntry + 1] = [fileTableEntry + 1] -1 ;
            if ([fileTableEntry + 1] == 0) then
                [fileTableEntry + 1] = -1;
            endif;
        endif;        

    endif;
endif;

if (functionNum == BUFFERED_READ) then
    alias blockNo R2;
	alias offset R3;
	alias writeAdr R4;

    alias bufferIdx R5;
    bufferIdx = blockNo % MAX_BUFFER;

    multipush(R1, R2, R3, R4, R5);
	R3 = bufferIdx;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R1 = ACQUIRE_BUFFER;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3, R4, R5);

    alias bufferEntry R6;
    bufferEntry = BUFFER_TABLE + 4 * bufferIdx;

    if ([bufferEntry] != blockNo) then
        // If buffer cache is dirty write it to disk
        if ([bufferEntry + 1] == 1) then
            multipush(R1, R2, R3, R4, R5, R6);
			R4 = [bufferEntry]; // Disk block
			R3 = BUFFER_BASE + bufferIdx; // Mem page
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R1 = DISK_STORE;
            call DEVICE_MANAGER;
            multipop(R1, R2, R3, R4, R5, R6);
            [bufferEntry + 1] = 0;
        endif;        

        // Load the block to buffer cache
        multipush(R1, R2, R3, R4, R5, R6);
		R4 = blockNo;
		R3 = BUFFER_BASE + bufferIdx;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R1 = DISK_LOAD;
		call DEVICE_MANAGER;
		multipop(R1, R2, R3, R4, R5, R6);

        [bufferEntry] = blockNo;
    endif;

    [writeAdr] = [BUFFER + PAGE_SIZE * bufferIdx + offset];

    multipush(R1);
	R3 = bufferIdx;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R1 = RELEASE_BUFFER;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3, R4);

endif;

return;