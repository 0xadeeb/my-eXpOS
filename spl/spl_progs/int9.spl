//exec system call
alias processTable R9;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * PT_ENTRY_SIZE;

// Set mode flag to system call no
[processTable + 9] = INT_EXEC;

// Save user stack in process table
[processTable + 13] = SP;

// Set kernal stack to user area of process table
SP = PAGE_SIZE * [processTable + 11] - 1;

alias userSP R0;
userSP = [processTable + 13];

alias retAdr R1;
retAdr = [PTBR + 2 * (userSP - 1) / PAGE_SIZE] * PAGE_SIZE + (userSP - 1) % PAGE_SIZE;

alias fileName R2;
fileName =  [[PTBR + 2 * (userSP - 4) / PAGE_SIZE] * PAGE_SIZE + (userSP - 4) % PAGE_SIZE];

alias i R3;
i = 0;
while (i < MAX_FILE_NUM) do
    if ([INODE_TABLE + i * 16] == EXEC && [INODE_TABLE + i * 16 + 1] == fileName) then
        break;
    endif;
    i = i + 1;
endwhile;

if (i == MAX_FILE_NUM) then
    [retAdr] = -1;
    SP = userSP;
else 
    alias inode_idx R3;
    multipush(R0, R1, R2, R3, R9);
    R1 = EXIT_PROCESS;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call PROCESS_MANAGER;
    multipop(R0, R1, R2, R3, R9);

    // Reclaim the user page of the destroyed process
    alias userPgNo R4;
    userPgNo = [processTable + 11];
    [MEMORY_FREE_LIST + userPgNo] = [MEMORY_FREE_LIST + userPgNo] + 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

    // Initialize kernal stack of the new program
    SP = userPgNo * PAGE_SIZE - 1;

    // Per process resource manager
    // (Last 16 words of the user area page)
    alias pprm R5;
    pprm = userPgNo * PAGE_SIZE + RESOURCE_TABLE_OFFSET;
    alias idx R6;
    idx = 0;
    while (idx < 16) do
        [pprm + idx] = -1;
        idx = idx + 2;
    endwhile;

    [processTable + 4] = RUNNING;
    [processTable + 7] = inode_idx;

    // Library
    [PTBR + 0] = 63;
    [PTBR + 1] = "0100";
    [PTBR + 2] = 64;
    [PTBR + 3] = "0100";

    // Heap lazy allocation
    [PTBR + 4] = -1;
    [PTBR + 5] = "0000";
    [PTBR + 6] = -1;
    [PTBR + 7] = "0000";

    // Stack
    multipush(R3, R4, R9);
    R1 = GET_FREE_PAGE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MEMORY_MANAGER;
    [PTBR + 16] = R0;
    [PTBR + 17] = "0110";
    R1 = GET_FREE_PAGE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MEMORY_MANAGER;
    [PTBR + 18] = R0;
    [PTBR + 19] = "0110";
    multipop(R3, R4, R9);

    // Code pages
    multipush(R3, R4, R9);
    R1 = GET_CODE_PAGE;
    R2 = [INODE_TABLE + 16 * inode_idx + 8];
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MEMORY_MANAGER;
    [PTBR + 8] = R0;
    [PTBR + 9] = "0100";
    multipop(R3, R4, R9);
    [PTBR + 10] = -1;
    [PTBR + 11] = "0000";
    [PTBR + 12] = -1;
    [PTBR + 13] = "0000";
    [PTBR + 14] = -1;
    [PTBR + 15] = "0000";
    
    // Initialize the disk map table
    alias disk_map_entry R0;
    disk_map_entry = DISK_MAP_TABLE + 10 * [SYSTEM_STATUS_TABLE+1];

    [disk_map_entry + 2] = -1;
    [disk_map_entry + 3] = -1;
    [disk_map_entry + 4] = [INODE_TABLE + 16 * inode_idx + 8];
    [disk_map_entry + 5] = [INODE_TABLE + 16 * inode_idx + 9];
    [disk_map_entry + 6] = [INODE_TABLE + 16 * inode_idx + 10];
    [disk_map_entry + 7] = [INODE_TABLE + 16 * inode_idx + 11];
    [disk_map_entry + 8] = -1;
    [disk_map_entry + 9] = -1;

    // Store IP in top of the stack
    [[PTBR + 16] * PAGE_SIZE] = [[PTBR + 8] * PAGE_SIZE + 1];
    SP = 8 * PAGE_SIZE;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;