//shutdown system call
alias processTable R9;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * PT_ENTRY_SIZE;

// Set mode flag to system call no
[processTable + 9] = INT_SHUTDOWN;

// Save user stack in process table
[processTable + 13] = SP;

// Set kernal stack to user area of process table
SP = PAGE_SIZE * [processTable + 11] - 1;

alias userSP R0;
userSP = [processTable + 13];

alias retAdr R1;
retAdr = [PTBR + 2 * (userSP - 1) / PAGE_SIZE] * PAGE_SIZE + (userSP - 1) % PAGE_SIZE;

// Check if logged in user is root and if current process running is the shell
if ([SYSTEM_STATUS_TABLE] != ROOT  || [SYSTEM_STATUS_TABLE + 1] != SHELL_PROCESS) then
    [retAdr] = -1;
    [processTable + 9] = 0;
    SP = userSP;
    ireturn; 
endif;

// Kill all processes except idle and init
R1 = KILL_ALL;
R2 = [SYSTEM_STATUS_TABLE + 1];
call PROCESS_MANAGER;

alias idx R0;
idx = 0;

// Write back all dirty buffer cache pages
while (idx < MAX_BUFFER) do
    if ([BUFFER_TABLE + 4 * idx] != -1 && [BUFFER_TABLE + 4 * idx + 1] == 1) then
        multipush(R0);
        R1 = DISK_STORE;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = BUFFER_BASE + idx;
        R4 = [BUFFER_TABLE + 4 * idx];
        call DEVICE_MANAGER;
        multipop(R0);
    endif;
    idx = idx + 1;
endwhile;

// Commit changes made in memory copy of data structures
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = DISK_FREE_LIST / PAGE_SIZE;
R4 = 2;
call DEVICE_MANAGER;

R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = INODE_TABLE / PAGE_SIZE;
R4 = 3;
call DEVICE_MANAGER;

R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = USER_TABLE / PAGE_SIZE;
R4 = 4;
call DEVICE_MANAGER;

R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = ROOT_FILE / PAGE_SIZE;
R4 = 5;
call DEVICE_MANAGER;

halt;