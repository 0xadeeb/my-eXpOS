// Login sys call
alias processTable R9;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

// Set mode flag to system call no
[processTable + 9] = INT_LOGIN;

// Save user stack in process table
[processTable + 13] = SP;

// Set kernal stack to user area of process table
SP = PAGE_SIZE * [processTable + 11] - 1;

alias userSP R0;
userSP = [processTable + 13];

alias retAdr R1;
retAdr = [PTBR + 2 * (userSP - 1) / PAGE_SIZE] * PAGE_SIZE + (userSP - 1) % PAGE_SIZE;

// if not invoked by login process
if ([SYSTEM_STATUS_TABLE + 1] != LOGIN_PROCESS) then
    [retAdr] = -2;
    goto exit;
endif;

alias username R2;
username =  [[PTBR + 2 * (userSP - 4) / PAGE_SIZE] * PAGE_SIZE + (userSP - 4) % PAGE_SIZE];

alias password R3;
password =  [[PTBR + 2 * (userSP - 3) / PAGE_SIZE] * PAGE_SIZE + (userSP - 3) % PAGE_SIZE];
encrypt password;

alias userid R4;
userid = 1;

while (userid < MAX_USER_NUM) do
    if ([USER_TABLE + 2 * userid] == username) then
        break;
    endif;
    userid = userid + 1;
endwhile;

if (userid == MAX_USER_NUM) then
    [retAdr] = -1;
    goto exit;
endif;

if (password != [USER_TABLE + 2 * userid + 1]) then
    [retAdr] = -1;
    goto exit;
endif;

// Set shell process status as created if authenticated
[PROCESS_TABLE + PT_ENTRY_SIZE * SHELL_PROCESS + 4] = CREATED;
[PROCESS_TABLE + PT_ENTRY_SIZE * SHELL_PROCESS + 3] = userid;

[SYSTEM_STATUS_TABLE] = userid;

// Send current process to sleep
[PROCESS_TABLE + PT_ENTRY_SIZE * LOGIN_PROCESS + 4] = WAIT_PROCESS;
[PROCESS_TABLE + PT_ENTRY_SIZE * LOGIN_PROCESS + 5] = SHELL_PROCESS;

multipush(R1, R9);
call CONTEXT_SWITCH;
multipop(R1, R9);

[retAdr] = 0;

exit:
SP = [processTable + 13];
[processTable + 9] = 0;
ireturn;