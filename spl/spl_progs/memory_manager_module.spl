// Mod 2
alias functionNum R1;

if (functionNum == GET_FREE_PAGE) then
    alias currentPID R2;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while ([SYSTEM_STATUS_TABLE + 2] == 0) do
        [PROCESS_TABLE + currentPID * PT_ENTRY_SIZE + 4] = WAIT_MEM;
        multipush(R1, R2);
        call CONTEXT_SWITCH;
        multipop(R1, R2);
    endwhile;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;

    alias page R0;
    page = 76;
    while (page < NUM_MEM_PAGES) do
        if ([MEMORY_FREE_LIST + page] == 0) then
            [MEMORY_FREE_LIST + page] = 1;
            break;
        endif;
        page = page + 1;
    endwhile;
    return;
endif;

if (functionNum == RELEASE_PAGE) then
    alias page R2;
    [MEMORY_FREE_LIST + page] = [MEMORY_FREE_LIST + page] - 1;
    if ([MEMORY_FREE_LIST + page] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
        alias pid R3;
        pid = 0;
        while (pid < MAX_PROC_NUM) do
            if ([PROCESS_TABLE + pid * PT_ENTRY_SIZE + 4] == WAIT_MEM) then
                [PROCESS_TABLE + pid * PT_ENTRY_SIZE + 4] = READY;
            endif;
            pid = pid + 1;
        endwhile;
    endif;
    return;
endif;

if (functionNum == GET_FREE_BLOCK) then
    alias blockNo R2;
	blockNo = DISK_FREE_AREA;

	while(blockNo < DISK_SWAP_AREA) do
		if([DISK_FREE_LIST + blockNo] == 0) then
			[DISK_FREE_LIST + blockNo] = 1;
			R0 = blockNo;
			return;
		endif;
		blockNo = blockNo + 1;
	endwhile;

	R0 = -1;
endif;

if(functionNum == RELEASE_BLOCK) then
	alias blockNumber R2;
    alias pid R3; //roadmap tells to get pid as arg too
	[DISK_FREE_LIST + blockNumber] = 0;
	return;
endif;

if (functionNum == GET_CODE_PAGE) then
    alias codeBlock R2;
    alias pid R3;
    alias proc R4;
    alias page R5;
    proc = 0;
    while (proc < MAX_PROC_NUM) do
        page = 0;
        while (page < 4) do
            if ([DISK_MAP_TABLE + 10 * proc + page + 4] == codeBlock
             && [PAGE_TABLE_BASE + 20 * proc + 2 * page + 8] != -1)
            then
                R0 = [PAGE_TABLE_BASE + 20 * proc + 2 * page + 8];
                [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                return;
            endif;
            page = page + 1;
        endwhile;
        proc = proc + 1;
    endwhile;

    alias freePage R0;
    multipush(R1, R2, R3);
    R1 = GET_FREE_PAGE;
    R2 = pid;
    call MEMORY_MANAGER;
    multipop(R1, R2, R3);

    multipush(R0, R1, R2, R3);
    R4 = codeBlock;
    R3 = freePage;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R1 = DISK_LOAD;
    call DEVICE_MANAGER;
    multipop(R0, R1, R2, R3);

    return;
endif;

if (functionNum == GET_SWAP_BLOCK) then
    alias block R0;
    block = DISK_SWAP_AREA;
    while (block < DISK_SIZE) do
        if ([DISK_FREE_LIST + block] == 0) then
            [DISK_FREE_LIST + block] = 1;
            return;
        endif;
        block = block + 1;
    endwhile;
    R0 = -1;
    return;
endif;

return;