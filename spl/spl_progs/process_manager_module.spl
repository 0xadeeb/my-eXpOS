// Mod 1
alias functionNum R1;
alias currentPID R2;

if (functionNum == GET_PCB_ENTRY) then
    alias pid R0;
    alias processTable R3;
    pid = SHELL_PROCESS + 1;
    processTable = PROCESS_TABLE + PT_ENTRY_SIZE * pid;
    while (pid < MAX_PROC_NUM) do
        if ([processTable + 4] == TERMINATED) then
            [processTable + 4] = ALLOCATED;
            [processTable + 1] = pid;
            [processTable + 14] = PAGE_TABLE_BASE + 20 * pid;
            [processTable + 15] = MAX_PROC_PAGES;
            return;
        endif;
        pid = pid + 1;
        processTable = processTable + 16;
    endwhile;

    pid = -1;
    return;
endif;

if (functionNum == EXIT_PROCESS) then

    multipush(R1, R2);
    R1 = FREE_PAGE_TABLE;
    call PROCESS_MANAGER;
    R1 = FREE_USER_AREA_PAGE;
    call PROCESS_MANAGER;
    multipop(R1, R2);

    if ([PROCESS_TABLE + currentPID * PT_ENTRY_SIZE + 9] != INT_EXEC) then
        alias proc R3;
        proc = PROCESS_TABLE + PT_ENTRY_SIZE;
        while (proc < PROCESS_TABLE + MAX_PROC_NUM * PT_ENTRY_SIZE) do
            if ([proc + 4] == WAIT_PROCESS && [proc + 5] == currentPID) then
                [proc + 4] = READY;
                [proc + 5] = -1;
            endif;
            if ([proc + 2] == currentPID) then
                [proc + 2] = -1;
            endif;
            proc = proc + 16;
        endwhile;
    endif;

    [PROCESS_TABLE + currentPID * PT_ENTRY_SIZE + 4] = TERMINATED;
    return;
endif;

if (functionNum == FREE_USER_AREA_PAGE) then

    alias resTable R3;
    resTable = [PROCESS_TABLE + currentPID * PT_ENTRY_SIZE + 11] * PAGE_SIZE + RESOURCE_TABLE_OFFSET;

    alias idx R4;
    idx = 0;

    while (idx < 8) do
        if ([resTable + 2 * idx] == SEMAPHORE) then
            multipush(R1, R2, R3, R4);
            R3 = [resTable + 2 * idx + 1];
            R2 = currentPID;
            R1 = RELEASE_SEMAPHORE;
            call RESOURCE_MANAGER;
            multipop(R1, R2, R3, R4);
        endif;
        if ([resTable + 2 * idx] == FILE) then
            multipush(R1, R2, R3, R4);
            R2 = [resTable + 2 * idx + 1];
            R1 = CLOSE;
            call FILE_MANAGER;
            multipop(R1, R2, R3, R4);
        endif;
        idx = idx + 1;
    endwhile;

    multipush(R1, R2);
    R1 = RELEASE_PAGE;
    R2 = [PROCESS_TABLE + currentPID * PT_ENTRY_SIZE + 11];
    call MEMORY_MANAGER;
    multipop(R1, R2);
    return;
endif;

if (functionNum == FREE_PAGE_TABLE) then
    alias page_table_entry R3;
    alias i R4;
    page_table_entry = [PROCESS_TABLE + currentPID * PT_ENTRY_SIZE + 14];
    i = 0;
    // Release all the pages
    while (i < 10) do
        if ([page_table_entry + 2 * i] == -1) then
            i = i + 1;
            continue;
        endif;
        if (i >= 2) then
            multipush(R1, R2, R3, R4);
            R2 = [page_table_entry + 2 * i];
            R1 = RELEASE_PAGE;
            call MEMORY_MANAGER;
            multipop(R1, R2, R3, R4);
        endif;
        [page_table_entry + 2 * i] = -1;
        [page_table_entry + 2 * i + 1] = "0000";
        i = i + 1;
    endwhile;

    // Release stack, heap disk blocks
    alias dmt R5;
    i = 2;
    while (i < MAX_PROC_PAGES) do
        dmt = DISK_MAP_TABLE + MAX_PROC_PAGES * currentPID + i;
        if ((i < 4) || (i > 7)) then
            if ([dmt] != -1) then
                multipush(R1, R2, R3, R4, R5);
                R2 = [dmt];
                R1 = RELEASE_BLOCK;
                call MEMORY_MANAGER;
                multipop(R1, R2, R3, R4, R5);
            endif;
        endif;
        [dmt] = -1;
        i = i + 1;
    endwhile;

    return;
endif;

if (functionNum == KILL_ALL) then
    alias idx R3;
	idx = 0;
    // Lock all files
	while(idx < MAX_FILE_NUM) do
		if([INODE_TABLE + 16 * idx + 1] != -1) then
			multipush(R1, R2, R3);
			R1 = ACQUIRE_INODE;
			R2 = currentPID;
			R3 = idx;
			call RESOURCE_MANAGER;
			multipop(R1, R2, R3);
		endif;
		idx = idx + 1;
	endwhile;

    alias pid R3;
    pid = SHELL_PROCESS;
    while (pid < MAX_PROC_NUM) do
        if (pid != currentPID && [PROCESS_TABLE + PT_ENTRY_SIZE * pid + 4] != TERMINATED) then
            multipush(R1, R2, R3);
			R1 = EXIT_PROCESS;
			R2 = pid;
			call PROCESS_MANAGER;
			multipop(R1, R2, R3);
        endif;
        pid = pid + 1;
    endwhile;
 
    alias idx R3;
	idx = 0;
    // Unlock all files
	while(idx < MAX_FILE_NUM) do
		if([INODE_TABLE + 16 * idx + 1] != -1) then
			multipush(R1, R2, R3);
			R1 = RELEASE_INODE;
			R2 = currentPID;
			R3 = idx;
			call RESOURCE_MANAGER;
			multipop(R1, R2, R3);
		endif;
		idx = idx + 1;
	endwhile;
 
endif;

return;