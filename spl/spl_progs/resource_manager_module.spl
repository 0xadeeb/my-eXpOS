//mod 0
alias functionNum R1;
alias currentPID R2;

if (functionNum == ACQUIRE_TERMINAL) then
    alias statusAddr R3;
    statusAddr = PROCESS_TABLE + 16 * currentPID + 4;
    while ([TERMINAL_STATUS_TABLE] == 1) do
        [statusAddr] = WAIT_TERMINAL;
        multipush(R1, R2, R3);
        call CONTEXT_SWITCH;
        multipop(R1, R2, R3);
    endwhile;
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
endif;

if (functionNum == RELEASE_TERMINAL) then
    if (currentPID != [TERMINAL_STATUS_TABLE + 1]) then
        R0 = -1;
        return;
    endif;
    [TERMINAL_STATUS_TABLE] = 0;
    alias itr R3;
    itr = 0;
    while (itr < 20) do
        if ([PROCESS_TABLE + itr * 16 + 4] == WAIT_TERMINAL) then
            [PROCESS_TABLE + itr * 16 + 4] = READY;
        endif;
    itr = itr + 1;
    endwhile;
    R0 = 0;
endif;

if (functionNum == ACQUIRE_DISK) then
    while ([DISK_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + currentPID * PT_ENTRY_SIZE + 4] = WAIT_DISK;
        multipush(R1, R2);
        call SCHEDULER;
        multipop(R1, R2);
    endwhile;
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
endif;

if (functionNum == ACQUIRE_SEMAPHORE) then
    alias sem_idx R3;
    sem_idx = 0;
    while (sem_idx < MAX_SEM_COUNT) do
        if ([SEMAPHORE_TABLE + 4 * sem_idx + 1] == 0) then
            break;
        endif;
        sem_idx = sem_idx + 1;
    endwhile;

    if (sem_idx == MAX_SEM_COUNT) then
        R0 = -1;
    else
        [SEMAPHORE_TABLE + 4 * sem_idx] = -1;
        [SEMAPHORE_TABLE + 4 * sem_idx + 1] = 1;
        R0 = sem_idx;
    endif;

endif;

if (functionNum == RELEASE_SEMAPHORE) then
    alias sem_idx R3;
    if ([SEMAPHORE_TABLE + 4 * sem_idx] != -1) then
        [SEMAPHORE_TABLE + 4 * sem_idx] = -1;
        alias proc R4;
        proc = 1;
        while (proc < MAX_PROC_NUM) do
            if ([PROCESS_TABLE + PT_ENTRY_SIZE * proc + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + PT_ENTRY_SIZE * proc + 5] == sem_idx) then
                [PROCESS_TABLE + PT_ENTRY_SIZE * proc + 4] = READY;
                [PROCESS_TABLE + PT_ENTRY_SIZE * proc + 5] = -1;
            endif;
            proc = proc + 1;
        endwhile;
    endif;

    [SEMAPHORE_TABLE + 4 * sem_idx + 1] = [SEMAPHORE_TABLE + 4 * sem_idx + 1] - 1;
endif;

if (functionNum == ACQUIRE_INODE) then
    alias inodeIndex R3;

	//busy loop while process is locked
	while([FILE_STATUS_TABLE + 4 * inodeIndex] != -1)	do
		[PROCESS_TABLE + 16 * currentPID + 4] = WAIT_FILE;
		[PROCESS_TABLE + 16 * currentPID + 5] = inodeIndex;
		multipush(R1, R2, R3);
		call CONTEXT_SWITCH;
		multipop(R1, R2, R3);
	endwhile;

    //if file deleted
	if([INODE_TABLE + 16 * inodeIndex] == -1) then
		R0 = -1;
	else
		[FILE_STATUS_TABLE + 4 * inodeIndex] = currentPID;
		R0 = 0;
	endif;

endif;

if (functionNum == RELEASE_INODE) then
    alias inodeIndex R3;

    // If file is locked by someother process or not locked    
	if([FILE_STATUS_TABLE + 4 * inodeIndex] != currentPID) then
		R0 = -1;
		return;
	endif;

	[FILE_STATUS_TABLE + 4 * inodeIndex] = -1;

	alias pid R4;
	pid = 1;
	while(pid < MAX_PROC_NUM) do
		if([PROCESS_TABLE + 16 * pid + 4] == WAIT_FILE && [PROCESS_TABLE + 16 * pid + 5] == inodeIndex) then
			[PROCESS_TABLE + 16 * pid + 4] = READY;
        endif;
		pid = pid + 1;
	endwhile;

	R0 = 0;
endif;

if (functionNum == ACQUIRE_BUFFER) then
    alias bufferIdx R3;

	while([BUFFER_TABLE + 4 * bufferIdx + 2] != -1) do
		[PROCESS_TABLE + PT_ENTRY_SIZE * currentPID + 4] = WAIT_BUFFER;
		[PROCESS_TABLE + PT_ENTRY_SIZE * currentPID + 5] = bufferIdx;
		multipush(R1, R2, R3);
		call CONTEXT_SWITCH;
		multipop(R1, R2, R3);
	endwhile;

	[BUFFER_TABLE + 4 * bufferIdx + 2] = currentPID;
    
endif;

if(functionNum == RELEASE_BUFFER) then
	alias bufferIdx R3;

	if([BUFFER_TABLE + 4 * bufferIdx + 2] != currentPID) then
		R0 = -1;
		return;
	endif;

	[BUFFER_TABLE + 4 * bufferIdx + 2] = -1;

	alias pid R4;
	pid = 0;
	while(pid < MAX_PROC_NUM) do
		if([PROCESS_TABLE + PT_ENTRY_SIZE * pid + 4] == WAIT_BUFFER && [PROCESS_TABLE + PT_ENTRY_SIZE * pid + 5] == bufferIdx) then
			[PROCESS_TABLE + PT_ENTRY_SIZE * pid + 4] = READY;
		endif;
		pid = pid + 1;
	endwhile;

	R0 = 0;
endif;

return;