// Read sys call
alias processTable R9;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

// Set mode flag to system call no
[processTable + 9] = INT_READ;

// Save user stack in process table
[processTable + 13] = SP;

// Set kernal stack to user area of process table
SP = PAGE_SIZE * [processTable + 11] - 1;

alias userSP R0;
userSP = [processTable + 13];

alias retAdr R1;
retAdr = [PTBR + 2 * (userSP - 1) / PAGE_SIZE] * PAGE_SIZE + (userSP - 1) % PAGE_SIZE;

alias arg1 R2;
arg1 =  [[PTBR + 2 * (userSP - 4) / PAGE_SIZE] * PAGE_SIZE + (userSP - 4) % PAGE_SIZE];

if ( arg1 != -1 ) then
	//Read from file
	alias fd R2;
	alias resTable R3;
	resTable = [processTable + 11] * PAGE_SIZE + RESOURCE_TABLE_OFFSET;

	if (fd < 0 || fd > 7 || [resTable + 2 * fd] != FILE) then
		[retAdr] = -1;
		goto exit;
	endif;

	alias openTableEntry R4;
	openTableEntry = OPEN_FILE_TABLE + 4 * [resTable + 2 * fd + 1];

	alias inodeEntry R5;
	inodeEntry = INODE_TABLE + 16 * [openTableEntry];

	multipush(R9, R0, R1, R2, R3, R4, R5);
	R3 = [openTableEntry];
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R1 = ACQUIRE_INODE;
	call RESOURCE_MANAGER;
	R6 = R0;
	multipop(R9, R0, R1, R2, R3, R4, R5);
    
	if (R6 == -1) then
		[retAdr] = -1;
		goto exit;
	endif;

	alias lseek R6;
	lseek = [openTableEntry + 2];

	alias wordAddress R7;
	wordAddress =  [[PTBR + 2 * (userSP - 3) / PAGE_SIZE] * PAGE_SIZE + (userSP - 3) % PAGE_SIZE];  //virtual address

	if ([openTableEntry] == INODE_ROOT) then
		if (lseek == 8 * MAX_FILE_NUM) then
			[retAdr] = -2;
			goto release_and_return;
		endif;

		wordAddress = [PTBR + 2 * wordAddress / PAGE_SIZE] * PAGE_SIZE + (wordAddress % PAGE_SIZE);		//physical address
		[wordAddress] = [ROOT_FILE + lseek];
	else 
		if (lseek == [inodeEntry + 2]) then
			[retAdr] = -2;
			goto release_and_return;
		endif;
		multipush(R9, R0, R1, R2, R3, R4, R5, R6, R7);
		R4 = wordAddress;
		R3 = lseek % XFS_BSIZE;
		R2 = [inodeEntry + 8 + lseek / XFS_BSIZE]; // Block number
		R1 = BUFFERED_READ;
		call FILE_MANAGER;
		multipop(R9, R0, R1, R2, R3, R4, R5, R6, R7);
	endif;

	[openTableEntry + 2] = [openTableEntry + 2] + 1;

	[retAdr] = 0;
	release_and_return:
	multipush(R0, R9);
	R1 = RELEASE_INODE;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = [openTableEntry];
	call RESOURCE_MANAGER;
	multipop(R0, R9);

else
	//Read from terminal
	alias word R3;
	word = [[PTBR + 2 * (userSP - 3) / PAGE_SIZE] * PAGE_SIZE + (userSP - 3) % PAGE_SIZE];
	multipush(R0, R1, R2, R3, R9);
	R1 = TERMINAL_READ;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;
	call DEVICE_MANAGER;
	multipop(R0, R1, R2, R3, R9);
	[retAdr] = 0;
endif;

exit:
SP = [processTable + 13];
[processTable + 9] = 0;
ireturn;
